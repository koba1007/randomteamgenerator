{"ast":null,"code":"var _jsxFileName = \"/home/tarkett/miljandev/soccer-app/components/TeamChooser.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { connect } from 'react-redux';\nimport { setSelectedTeams } from \"../redux/actions/teamsActions\";\n\nclass TeamChooser extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      players: []\n    };\n  }\n\n  componentDidMount() {\n    this.getTeams();\n  }\n\n  getShuffledPlayers() {\n    const shuffledPlayers = this.props.players;\n\n    for (var i = shuffledPlayers.length - 1; i > 0; i--) {\n      var rand = Math.floor(Math.random() * (i + 1));\n      [shuffledPlayers[i], shuffledPlayers[rand]] = [shuffledPlayers[rand], shuffledPlayers[i]];\n    }\n\n    return shuffledPlayers;\n  }\n\n  getTeams() {\n    const selectedTeams = [];\n    let teamNumber = 1;\n    this.getShuffledPlayers().forEach((player, index) => {\n      selectedTeams[teamNumber] = Array.isArray(selectedTeams[teamNumber]) ? selectedTeams[teamNumber] : [];\n      selectedTeams[teamNumber].push(index);\n\n      if (teamNumber === this.props.numberOfTeams) {\n        teamNumber = 1;\n        return;\n      }\n\n      teamNumber++;\n    });\n    this.props.setSelectedTeams(selectedTeams);\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, this.props.selectedTeams.map((team, teamIndex) => __jsx(\"div\", {\n      key: teamIndex,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, __jsx(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"Team \", teamIndex, \" \"), __jsx(\"table\", {\n      className: \"table table-hover\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, __jsx(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, __jsx(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, __jsx(\"th\", {\n      scope: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \" Player name:\"))), __jsx(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, team.map(playersIndex => __jsx(\"tr\", {\n      className: \"table-active\",\n      key: playersIndex,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, __jsx(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, this.props.players[playersIndex]))))))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  numberOfTeams: state.teams.numberOfTeams,\n  selectedTeams: state.teams.selectedTeams,\n  players: state.player.players\n});\n\nconst mapDispatchToProps = {\n  setSelectedTeams: setSelectedTeams\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamChooser);","map":{"version":3,"sources":["/home/tarkett/miljandev/soccer-app/components/TeamChooser.js"],"names":["connect","setSelectedTeams","TeamChooser","React","Component","constructor","props","state","players","componentDidMount","getTeams","getShuffledPlayers","shuffledPlayers","i","length","rand","Math","floor","random","selectedTeams","teamNumber","forEach","player","index","Array","isArray","push","numberOfTeams","render","map","team","teamIndex","playersIndex","mapStateToProps","teams","mapDispatchToProps"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux';\nimport { setSelectedTeams } from \"../redux/actions/teamsActions\";\n\nclass TeamChooser extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            players: []\n        };\n    }\n    componentDidMount() {\n        this.getTeams()\n    }\n    getShuffledPlayers() {\n       const shuffledPlayers =  this.props.players\n        for (var i = shuffledPlayers.length - 1; i > 0; i--) {\n            var rand = Math.floor(Math.random() * (i + 1));\n            [shuffledPlayers[i], shuffledPlayers[rand]] = [shuffledPlayers[rand], shuffledPlayers[i]]\n        }\n        return shuffledPlayers\n    }\n    getTeams() {\n     const selectedTeams = [] ;\n     let teamNumber = 1;\n     this.getShuffledPlayers().forEach((player, index) => {\n        selectedTeams[teamNumber] = Array.isArray(selectedTeams[teamNumber]) ? selectedTeams[teamNumber] : []\n        selectedTeams[teamNumber].push(index)\n        if (teamNumber === this.props.numberOfTeams) {\n            teamNumber = 1;\n            return\n        }\n        teamNumber++\n    })\n        this.props.setSelectedTeams(selectedTeams)\n    }\n\n    render() {\n        return (\n            <div>\n                {this.props.selectedTeams.map( (team, teamIndex) =>\n                    <div key={teamIndex}>\n                        <h5>Team {teamIndex} </h5>\n                        <table className=\"table table-hover\">\n                            <thead>\n                                <tr>\n                                    <th scope=\"col\"> Player name:</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                            { team.map(playersIndex =>\n                                <tr className=\"table-active\" key={playersIndex}>\n                                    <td>{this.props.players[playersIndex]}</td>\n                                </tr>\n                            )}\n                            </tbody>\n                        </table>\n                    </div>\n                 )\n                }\n            </div>\n        )\n    }\n}\nconst mapStateToProps = state => ({\n    numberOfTeams: state.teams.numberOfTeams,\n    selectedTeams: state.teams.selectedTeams,\n    players: state.player.players\n});\n\nconst mapDispatchToProps = {\n    setSelectedTeams: setSelectedTeams,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamChooser);"]},"metadata":{},"sourceType":"module"}