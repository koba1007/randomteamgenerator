{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ADD_PLAYER } from '../actions/playerActions';\n\nconst playerReducer = (state = {\n  players: []\n}, action) => {\n  switch (action.type) {\n    case ADD_PLAYER:\n      console.log(action);\n      return _objectSpread({}, state, {\n        players: action.payLoad\n      });\n\n    default:\n      return _objectSpread({}, state);\n  }\n};\n\nexport default playerReducer;","map":{"version":3,"sources":["/home/tarkett/miljandev/soccer-app/redux/reducers/playerReducer.js"],"names":["ADD_PLAYER","playerReducer","state","players","action","type","console","log","payLoad"],"mappings":";;;;;;AAAA,SAASA,UAAT,QAA2B,0BAA3B;;AAEA,MAAMC,aAAa,GAAG,CAACC,KAAK,GAAG;AAAEC,EAAAA,OAAO,EAAE;AAAX,CAAT,EAAyBC,MAAzB,KAAoC;AACtD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKL,UAAL;AACIM,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACA,+BAAWF,KAAX;AAAkBC,QAAAA,OAAO,EAAEC,MAAM,CAACI;AAAlC;;AACJ;AACI,+BAAWN,KAAX;AALR;AAOH,CARD;;AASA,eAAeD,aAAf","sourcesContent":["import { ADD_PLAYER } from '../actions/playerActions';\n\nconst playerReducer = (state = { players: []}, action) => {\n    switch (action.type) {\n        case ADD_PLAYER:\n            console.log(action)\n            return {...state, players: action.payLoad };\n        default:\n            return {...state};\n    }\n};\nexport default playerReducer;\n"]},"metadata":{},"sourceType":"module"}