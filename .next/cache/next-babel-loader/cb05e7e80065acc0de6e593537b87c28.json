{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ADD_PLAYER } from '../actions/playerActions';\n\nvar playerReducer = function playerReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    players: []\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_PLAYER:\n      console.log(action);\n      return _objectSpread({}, state, {\n        players: [action.payload]\n      });\n\n    default:\n      return _objectSpread({}, state);\n  }\n};\n\nexport default playerReducer;","map":{"version":3,"sources":["/home/tarkett/miljandev/soccer-app/redux/reducers/playerReducer.js"],"names":["ADD_PLAYER","playerReducer","state","players","action","type","console","log","payload"],"mappings":";;;;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,0BAA3B;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAoC;AAAA,MAAnCC,KAAmC,uEAA3B;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAA2B;AAAA,MAAXC,MAAW;;AACtD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKL,UAAL;AACIM,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACA,+BAAWF,KAAX;AAAkBC,QAAAA,OAAO,EAAE,CAAEC,MAAM,CAACI,OAAT;AAA3B;;AACJ;AACI,+BAAWN,KAAX;AALR;AAOH,CARD;;AASA,eAAeD,aAAf","sourcesContent":["import { ADD_PLAYER } from '../actions/playerActions';\n\nconst playerReducer = (state = { players: []}, action) => {\n    switch (action.type) {\n        case ADD_PLAYER:\n            console.log(action)\n            return {...state, players: [ action.payload] };\n        default:\n            return {...state};\n    }\n};\nexport default playerReducer;\n"]},"metadata":{},"sourceType":"module"}