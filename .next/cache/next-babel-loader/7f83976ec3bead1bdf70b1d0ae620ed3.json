{"ast":null,"code":"var _jsxFileName = \"/home/tarkett/miljandev/soccer-app/components/TeamChooser.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { connect } from 'react-redux';\nimport { removePlayer } from \"../redux/actions/playerActions\";\n\nclass TeamChooser extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      players: []\n    };\n  }\n\n  componentDidMount() {\n    this.getTeams();\n  }\n\n  getShuffledPlayers() {\n    const shuffledPlayers = this.props.players;\n\n    for (var i = shuffledPlayers.length - 1; i > 0; i--) {\n      var rand = Math.floor(Math.random() * (i + 1));\n      [shuffledPlayers[i], shuffledPlayers[rand]] = [shuffledPlayers[rand], shuffledPlayers[i]];\n    }\n\n    return shuffledPlayers;\n  }\n\n  getTeams() {\n    const selectedTeams = [];\n    const numberOfTeams = 3;\n    let teamNumber = 1;\n    this.getShuffledPlayers().forEach((player, index) => {\n      console.log(selectedTeams[1]);\n      console.log('team no' + teamNumber);\n      selectedTeams[teamNumber] = Array.isArray(selectedTeams[teamNumber]) ? selectedTeams[teamNumber] : [];\n      selectedTeams[teamNumber].push(index);\n      console.log(selectedTeams[teamNumber]);\n\n      if (teamNumber === numberOfTeams) {\n        teamNumber = 1;\n        return;\n      }\n\n      teamNumber++;\n    });\n    console.log(selectedTeams);\n    return selectedTeams;\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"test\", this.getTeams().forEach(teamIndex => __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"Team \", teamIndex)));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  players: state.player.players\n});\n\nconst mapDispatchToProps = {\n  removePlayer: removePlayer\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamChooser);","map":{"version":3,"sources":["/home/tarkett/miljandev/soccer-app/components/TeamChooser.js"],"names":["connect","removePlayer","TeamChooser","React","Component","constructor","props","state","players","componentDidMount","getTeams","getShuffledPlayers","shuffledPlayers","i","length","rand","Math","floor","random","selectedTeams","numberOfTeams","teamNumber","forEach","player","index","console","log","Array","isArray","push","render","teamIndex","mapStateToProps","mapDispatchToProps"],"mappings":";;;AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,gCAA7B;;AAEA,MAAMC,WAAN,SAA0BC,KAAK,CAACC,SAAhC,CAA0C;AACtCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE;AADA,KAAb;AAGH;;AACDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,QAAL;AACH;;AACDC,EAAAA,kBAAkB,GAAG;AAClB,UAAMC,eAAe,GAAI,KAAKN,KAAL,CAAWE,OAApC;;AACC,SAAK,IAAIK,CAAC,GAAGD,eAAe,CAACE,MAAhB,GAAyB,CAAtC,EAAyCD,CAAC,GAAG,CAA7C,EAAgDA,CAAC,EAAjD,EAAqD;AACjD,UAAIE,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,CAAC,GAAG,CAArB,CAAX,CAAX;AACA,OAACD,eAAe,CAACC,CAAD,CAAhB,EAAqBD,eAAe,CAACG,IAAD,CAApC,IAA8C,CAACH,eAAe,CAACG,IAAD,CAAhB,EAAwBH,eAAe,CAACC,CAAD,CAAvC,CAA9C;AACH;;AACD,WAAOD,eAAP;AACH;;AACDF,EAAAA,QAAQ,GAAG;AACV,UAAMS,aAAa,GAAG,EAAtB;AACA,UAAMC,aAAa,GAAG,CAAtB;AACA,QAAIC,UAAU,GAAG,CAAjB;AACA,SAAKV,kBAAL,GAA0BW,OAA1B,CAAkC,CAACC,MAAD,EAASC,KAAT,KAAmB;AAClDC,MAAAA,OAAO,CAACC,GAAR,CAAYP,aAAa,CAAC,CAAD,CAAzB;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAUL,UAAtB;AACAF,MAAAA,aAAa,CAACE,UAAD,CAAb,GAA4BM,KAAK,CAACC,OAAN,CAAcT,aAAa,CAACE,UAAD,CAA3B,IAA2CF,aAAa,CAACE,UAAD,CAAxD,GAAuE,EAAnG;AACAF,MAAAA,aAAa,CAACE,UAAD,CAAb,CAA0BQ,IAA1B,CAA+BL,KAA/B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYP,aAAa,CAACE,UAAD,CAAzB;;AACA,UAAIA,UAAU,KAAKD,aAAnB,EAAkC;AAC9BC,QAAAA,UAAU,GAAG,CAAb;AACA;AACH;;AACDA,MAAAA,UAAU;AAEb,KAZA;AAaGI,IAAAA,OAAO,CAACC,GAAR,CAAYP,aAAZ;AACA,WAAOA,aAAP;AACH;;AAEDW,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAEK,KAAKpB,QAAL,GAAgBY,OAAhB,CAA0BS,SAAD,IACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACUA,SADV,CADH,CAFL,CADJ;AAWH;;AAnDqC;;AAqD1C,MAAMC,eAAe,GAAGzB,KAAK,KAAK;AAC9BC,EAAAA,OAAO,EAAED,KAAK,CAACgB,MAAN,CAAaf;AADQ,CAAL,CAA7B;;AAIA,MAAMyB,kBAAkB,GAAG;AACvBhC,EAAAA,YAAY,EAAEA;AADS,CAA3B;AAGA,eAAeD,OAAO,CAACgC,eAAD,EAAkBC,kBAAlB,CAAP,CAA6C/B,WAA7C,CAAf","sourcesContent":["import { connect } from 'react-redux';\nimport { removePlayer } from \"../redux/actions/playerActions\";\n\nclass TeamChooser extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            players: []\n        };\n    }\n    componentDidMount() {\n        this.getTeams()\n    }\n    getShuffledPlayers() {\n       const shuffledPlayers =  this.props.players\n        for (var i = shuffledPlayers.length - 1; i > 0; i--) {\n            var rand = Math.floor(Math.random() * (i + 1));\n            [shuffledPlayers[i], shuffledPlayers[rand]] = [shuffledPlayers[rand], shuffledPlayers[i]]\n        }\n        return shuffledPlayers\n    }\n    getTeams() {\n     const selectedTeams = [] ;\n     const numberOfTeams = 3;\n     let teamNumber = 1;\n     this.getShuffledPlayers().forEach((player, index) => {\n        console.log(selectedTeams[1])\n        console.log('team no'+teamNumber)\n        selectedTeams[teamNumber] = Array.isArray(selectedTeams[teamNumber]) ? selectedTeams[teamNumber] : []\n        selectedTeams[teamNumber].push(index)\n        console.log(selectedTeams[teamNumber])\n        if (teamNumber === numberOfTeams) {\n            teamNumber = 1;\n            return\n        }\n        teamNumber++\n\n    })\n        console.log(selectedTeams)\n        return selectedTeams;\n    }\n\n    render() {\n        return (\n            <div>\n                test\n                {this.getTeams().forEach( (teamIndex) =>\n                    <div>\n                        Team {teamIndex}\n                    </div>\n                    )\n                }\n            </div>\n        )\n    }\n}\nconst mapStateToProps = state => ({\n    players: state.player.players\n});\n\nconst mapDispatchToProps = {\n    removePlayer: removePlayer,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamChooser);"]},"metadata":{},"sourceType":"module"}